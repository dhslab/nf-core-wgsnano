/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GUPPY_BASECALLER {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample}/fastq" },
            pattern:  '*.fastq.gz' ,
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
    }

    withName: GUPPY_BASECALLER_GPU {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample}/fastq" },
            pattern:  '*.fastq.gz' ,
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
    }


    withName: PYCOQC {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample}/qc/pycoqc" },
            pattern:  '*.html' ,
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
    }

    withName: GUPPY_ALIGNER {
        publishDir = [
            enabled: false
            ]
    }

    withName: SAMTOOLS_MERGE {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample}/guppy_aligner/" },
            pattern:  "*.{bam,bai}",
            mode: params.publish_dir_mode
            ]
    }

    withName: PEPPER {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample}/pepper/vcf/" },
            pattern:  "*.vcf*",
            mode: params.publish_dir_mode
            ]
    }

    withName: SAMTOOLS_INDEX {
        publishDir =
            [
            path: { "${params.outdir}/samples/${meta.sample}/pepper/haplotagged_bam/" },
            pattern:  "*.{haplotagged.bam,haplotagged.bam.bai}",
            mode: params.publish_dir_mode
            ]
    }

    withName: MOSDEPTH {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample}/qc/mosdepth/" },
            pattern:  "*{mosdepth,bed}*",
            mode: params.publish_dir_mode
            ]
    }

    withName: MODBAM2BED {
        publishDir = [
            [
            path: { "${params.outdir}/samples/${meta.sample}/methylation_calls/accumulated" },
            pattern:  "*.acc.bed",
            mode: params.publish_dir_mode
            ],
            [
            path: { "${params.outdir}/samples/${meta.sample}/methylation_calls/stranded" },
            pattern:  "*.stranded.bed",
            mode: params.publish_dir_mode
            ]
        ]
    }



    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: MULTIQC {
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
    }

}
